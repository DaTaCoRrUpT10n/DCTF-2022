
def int_to_bytes(x: int) -> bytes:
    return x.to_bytes((x.bit_length() + 7) // 8, 'big')

def find_invpow(x,n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n <= x < (y + 1) ** n.
    """
    high = 1
    while high ** n <= x:
        high *= 2
    low = high//2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1

e = 3
N = 21797277129831186979037652533881882004189101563476946221587746667088629864425766835588021676947475930294525546110802705594350460658365475136275177241843782694638359941413105346475670853146399818414244792296885871580276665635881478813955431259430704241566877237964940032842209678218712490196273965011888061180175326329182372483665368705643214011645925347183630910393389921706219124095991530196737872661550695429580749036618024599657590812128398832567173299264968253586618105929990761755415962496422660164847442151593982775839738580870843431310981398780983485684041927671189399768467012453616908517167985550986753121721
c = 5129841021700963781892451178825753151318348673406540681010518951319315555256671253324240014439591100306561337320945880164979953459723243161810802414323158667848494114699726973645294772047648834304883017803426863549284302956071774755923585982946398872411462409089743794664238776330421082330423979788870079786364895718612845626955993061104716954482360883615594581090820705421097411315916905504396779069166314037541625873236663044423961477695987854750557171501484080913890279211778801593708504485104636491031332666160317070453982041424820402767848230982891027468753642315632933616697176205081769335703972795717719456835

print(c)
for i in range(0,10000):
    x=find_invpow(N*i+c,e)
    if i%100==0:
        print(i,end=' ')
    if pow(x,e) == N*i+c:
        print("found it")
        print(i,x)
        print(int_to_bytes(x))
        break